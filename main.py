#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Mon Nov 14 09:31:36 2022

Main is the interface for which the project CNN Autoencoder will start

@author: Ross Erskine
"""


import matplotlib.pyplot as plt
import random

# import modules
import Parameters as pr
import ImageGenerator as ig
import CNN_Autoencoder as CAE

############################## Constructors ##################################
params = pr.Paramaters() # Construct Paramaters

traingen, valgen = ig.train_dataLoader()  # Construct ImageGenerator

model = CAE.CAE_model()     # Construct model
model.summary()

########################### Fit model ########################################
history = model.fit(traingen, steps_per_epoch= 512 // params.get_batch_size(),epochs=100,
        validation_data=valgen,
        validation_steps=64// params.get_batch_size(),
        shuffle = True)

######### plot the training and validation accuracy and loss at each epoch ####
loss = history.history['loss']
val_loss = history.history['val_loss']
epochs = range(1, len(loss) + 1)
plt.plot(epochs, loss, 'y', label='Training loss')
plt.plot(epochs, val_loss, 'r', label='Validation loss')
plt.title('Training loss')
plt.xlabel('Epochs')
plt.ylabel('Loss')
plt.legend()
plt.show()

############################ Sanity check ####################################
# Get all batches generated by the datagen and pick a batch for prediction
#Just to test the model. 
data_batch = []  #Capture all training batches as a numpy array
img_num = 0
while img_num <= traingen.batch_index:   #gets each generated batch of size batch_size
    data = traingen.next()
    data_batch.append(data[0])
    img_num = img_num + 1

predicted = model.predict(data_batch[0])  #Predict on the first batch of images


#Sanity check, view few images and corresponding reconstructions
image_number = random.randint(0, predicted.shape[0])
plt.figure(figsize=(12, 6))
plt.subplot(121)
plt.imshow(data_batch[0][image_number])
plt.subplot(122)
plt.imshow(predicted[image_number])
plt.show()

#Let us examine the reconstruction error between our validation data
validation_error = model.evaluate_generator(valgen)


print("Recon. error for the validation data is: ", validation_error)
